@using BlazorTest.Models
@using BlazorTest.Database
@using Microsoft.EntityFrameworkCore
@using BlazorTest.Components
@using BlazorTest.Services
@using BlazorTest.Services.Analytics
@inject NavigationManager NavigationManager
@inject LaundryStateService LaundryState
@inject BankService BankService
@inject LaundromatService LaundromatService
@rendermode InteractiveServer

<div class="nav-container" style="position: relative; z-index: 10;">
    <div class="nav-search-container" style="position: relative; z-index: 1000;">
        <div class="nav-home-icon" @onclick='() => NavigationManager.NavigateTo("/")'></div>
        <SearchBar Placeholder="Search Banks..." Items="@bankItems" OnSelectionChanged="@HandleBankSelection"
            SelectedItemsFromParent="@GetSelectedBankItems()" />
        <SearchBar Placeholder="Search Bank ID..." Items="@bankIdItems" OnSelectionChanged="@HandleBankSelection"
            SelectedItemsFromParent="@GetSelectedBankIdItems()" Size="small" />
        <SearchBar Placeholder="Search laundromats..." Items="@laundromatItems"
            OnSelectionChanged="@HandleLaundromatSelection" SelectedItemsFromParent="@GetSelectedLaundromatItems()" />
        <SearchBar Placeholder="Search ERP ID..." Items="@erpIdItems" OnSelectionChanged="@HandleLaundromatSelection"
            SelectedItemsFromParent="@GetSelectedErpIdItems()" Size="small" />

        <Calender SelectedStartDateChanged="@((date) => UpdateStartDate(date))"
            SelectedEndDateChanged="@((date) => UpdateEndDate(date))" />
    </div>
    <div class="nav-navigation-container">
        <div class="nav-item" @onclick='() => NavigationManager.NavigateTo("compare")'>
            <p>Compare</p>
        </div>
        <div class="nav-item" @onclick='() => NavigationManager.NavigateTo("report")'>
            <p>Report</p>
        </div>
        @if (revenueOverTimeDataPoints.Count > 0)
        {
            <ChartDataExporter Data="revenueOverTimeDataPoints" />
        }
    </div>
</div>

@code {
    private List<SearchItem> bankItems = new();
    private List<BankEntity> selectedBanks = new();

    private List<SearchItem> laundromatItems = new();
    private List<Laundromat> selectedLaundromats = new();
    private List<SearchItem> laundromatItemsOriginal = new();
    private List<SearchItem> bankIdItems = new();
    private List<ChartDataPoint> revenueOverTimeDataPoints = new();

    private List<SearchItem> erpIdItems = new();

    private DateTime? startDate;
    private DateTime? endDate;


    protected override void OnInitialized()
    {
        LaundryState.OnStateChanged += HandleStateChanged;
        LaundryState.OnRevenueOverTimeDataPointsChanged += HandleRevenueOverTimeDataPointsChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadLaundromats();
        await LoadBanks();
    }

    private Task UpdateStartDate(DateTime? date)
    {
        startDate = date;
        LaundryState.UpdateStartDate(startDate);
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task UpdateEndDate(DateTime? date)
    {
        endDate = date;
        LaundryState.UpdateEndDate(endDate);
        StateHasChanged();
        return Task.CompletedTask;
    }

    private List<Laundromat> GetEffectiveSelectedLaundromats() =>
    selectedLaundromats.Any() ? selectedLaundromats : laundromatItems.Select(item =>
    item.Data).OfType<Laundromat>().ToList();

    private List<SearchItem> GetSelectedLaundromatItems() =>
    laundromatItems.Where(item => selectedLaundromats.Any(l => l.kId == item.Id)).ToList();

    private List<SearchItem> GetSelectedErpIdItems() =>
    erpIdItems.Where(item => selectedLaundromats.Any(l => l.kId == item.Id)).ToList();

    private List<SearchItem> GetSelectedBankItems() =>
    bankItems.Where(item => selectedBanks.Any(b => b.bankId.ToString() == item.Id)).ToList();

    private List<SearchItem> GetSelectedBankIdItems() =>
    bankIdItems.Where(item => selectedBanks.Any(b => b.bankId.ToString() == item.Id)).ToList();

    private void HandleStateChanged()
    {
        if (LaundryState.SelectedLaundromats.Count != selectedLaundromats.Count ||
        !LaundryState.SelectedLaundromats.SequenceEqual(selectedLaundromats))
        {
            selectedLaundromats = LaundryState.SelectedLaundromats.ToList();
            Console.WriteLine($"NavMenu: Updated local selectedLaundromats from service. Count: {selectedLaundromats.Count}");
        }

        StateHasChanged();
    }

        private void HandleRevenueOverTimeDataPointsChanged()
    {
        revenueOverTimeDataPoints = LaundryState.GetRevenueOverTimeDataPoints();
        StateHasChanged();
    }

    public void Dispose()
    {
        LaundryState.OnStateChanged -= HandleStateChanged;
        LaundryState.OnRevenueOverTimeDataPointsChanged -= HandleRevenueOverTimeDataPointsChanged;
    }

    private async Task LoadBanks()
    {
        try
        {
            var banks = await BankService.GetAllBanksAsync();

            bankItems = banks.Select(b => new SearchItem
            {
                Id = b.bankId.ToString(),
                DisplayText = string.IsNullOrEmpty(b.name) ? "Unnamed Bank" : b.name,
                Data = b
            }).OrderBy(b => b.DisplayText).ToList();

            bankIdItems = banks.Select(b => new SearchItem
            {
                Id = b.bankId.ToString(),
                DisplayText = b.bankId.ToString(),
                Data = b
            }).OrderBy(b => b.DisplayText).ToList();

            LaundryState.UpdateBankItems(bankItems);
            LaundryState.UpdateBankIdItems(bankIdItems);
            LaundryState.UpdateSelectedBanks(selectedBanks);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading banks: {ex.Message}");
        }
    }

    private async Task LoadLaundromats()
    {
        try
        {
            var laundromats = await LaundromatService.GetAllLaundromatsAsync();

            laundromatItems = laundromats.Select(l => new SearchItem
            {
                Id = l.kId,
                DisplayText = l.name ?? "Unnamed Laundromat",
                Data = l
            }).OrderBy(l => l.DisplayText).ToList();

            erpIdItems = laundromats.Select(l => new SearchItem
            {
                Id = l.kId,
                DisplayText = string.IsNullOrEmpty(l.externalId) ? "No ERP ID" : l.externalId,
                Data = l
            }).OrderBy(l => l.DisplayText).ToList();

            laundromatItemsOriginal = new List<SearchItem>(laundromatItems);
            selectedLaundromats = new List<Laundromat>();

            LaundryState.UpdateLaundromatItems(laundromatItems);
            LaundryState.UpdateErpIdItems(erpIdItems);
            LaundryState.UpdateOriginalLaundromats(laundromatItemsOriginal);
            LaundryState.UpdateSelectedLaundromats(selectedLaundromats);

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading laundromats: {ex.Message}");
        }
    }

    private void HandleBankSelection(List<SearchItem> items)
    {
        // Store previous state
        var previouslySelectedBankIds = selectedBanks.Select(b => b.bankId).ToHashSet();
        var previousSelectedLaundromats = selectedLaundromats.ToList();

        // Clear and update selected banks
        selectedBanks.Clear();
        foreach (var item in items)
        {
            if (item.Data is BankEntity bank)
            {
                selectedBanks.Add(bank);
            }
        }

        // Identify newly selected banks
        var currentSelectedBankIds = selectedBanks.Select(b => b.bankId).ToHashSet();
        var newlySelectedBankIds = currentSelectedBankIds.Except(previouslySelectedBankIds).ToHashSet();
        
        if (!laundromatItemsOriginal.Any())
        {
            laundromatItemsOriginal = new List<SearchItem>(laundromatItems);
        }

        if (currentSelectedBankIds.Any())
        {
            // Reorder bank items to show selected banks first
            bankItems = bankItems.OrderByDescending(item =>
                !string.IsNullOrEmpty(item.Id) && currentSelectedBankIds.Contains(int.Parse(item.Id)))
                .ThenBy(item => item.DisplayText)
                .ToList();

            bankIdItems = bankIdItems.OrderByDescending(item =>
                !string.IsNullOrEmpty(item.Id) && currentSelectedBankIds.Contains(int.Parse(item.Id)))
                .ThenBy(item => item.DisplayText)
                .ToList();

            // Filter laundromats to only those belonging to selected banks
            var filteredLaundromatItems = laundromatItemsOriginal
                .Where(item => item.Data is Laundromat laundromat && 
                    currentSelectedBankIds.Contains(laundromat.bankId))
                .ToList();

            // MODIFIED: Add only laundromats from newly selected banks
            if (newlySelectedBankIds.Any())
            {
                foreach (var item in filteredLaundromatItems)
                {
                    if (item.Data is Laundromat laundromat && 
                        newlySelectedBankIds.Contains(laundromat.bankId) &&
                        !selectedLaundromats.Any(l => l.kId == laundromat.kId))
                    {
                        selectedLaundromats.Add(laundromat);
                    }
                }
                
                Console.WriteLine($"Added {selectedLaundromats.Count - previousSelectedLaundromats.Count} " +
                    $"laundromats from {newlySelectedBankIds.Count} newly selected banks");
            }
            
            // Get the IDs of selected laundromats for sorting
            var selectedLaundromatIds = selectedLaundromats.Select(l => l.kId).ToHashSet();
            
            // Update laundromat items list to show selected ones first
            laundromatItems = filteredLaundromatItems
                .OrderByDescending(item => selectedLaundromatIds.Contains(item.Id))
                .ThenBy(item => item.DisplayText)
                .ToList();
            // Update ERP ID items to match the filtered laundromats
            var visibleLaundromatIds = laundromatItems.Select(item => item.Id).ToHashSet();
            erpIdItems = laundromatItems
                .Select(item => new SearchItem
                {
                    Id = item.Id,
                    DisplayText = string.IsNullOrEmpty((item.Data as Laundromat)?.externalId) ? "No ERP ID" : (item.Data as Laundromat).externalId,
                    Data = item.Data
                })
                .OrderByDescending(item => selectedLaundromatIds.Contains(item.Id))
                .ThenBy(item => item.DisplayText)
                .ToList();
        }
        else
        {
            // No banks selected, show all laundromats but none selected
            bankItems = bankItems.OrderBy(item => item.DisplayText).ToList();
            bankIdItems = bankIdItems.OrderBy(item => item.DisplayText).ToList();

            if (laundromatItemsOriginal.Any())
            {
                selectedLaundromats.Clear();
                laundromatItems = laundromatItemsOriginal
                    .OrderBy(item => item.DisplayText)
                    .ToList();

                erpIdItems = laundromatItemsOriginal
                    .Select(item => new SearchItem
                    {
                        Id = item.Id,
                        DisplayText = string.IsNullOrEmpty((item.Data as Laundromat)?.externalId) ? "No ERP ID" : (item.Data as Laundromat).externalId,
                        Data = item.Data
                    })
                    .OrderBy(item => item.DisplayText)
                    .ToList();
            }
        }

        // Update the shared state service
        LaundryState.UpdateSelectedLaundromats(selectedLaundromats);
        LaundryState.UpdateBankItems(bankItems);
        LaundryState.UpdateBankIdItems(bankIdItems);
        LaundryState.UpdateSelectedBanks(selectedBanks);
        LaundryState.UpdateLaundromatItems(laundromatItems);
        LaundryState.UpdateErpIdItems(erpIdItems);
        LaundryState.UpdateOriginalLaundromats(laundromatItemsOriginal);

        StateHasChanged();
    }

    private void HandleLaundromatSelection(List<SearchItem> items)
    {
        selectedLaundromats.Clear();
        var selectedBankIds = selectedBanks.Select(b => b.bankId).ToHashSet();

        foreach (var item in items)
        {
            if (item.Data is Laundromat laundromat && (!selectedBankIds.Any() || selectedBankIds.Contains(laundromat.bankId)))
            {
                selectedLaundromats.Add(laundromat);
            }
        }

        var selectedLaundromatIds = selectedLaundromats.Select(l => l.kId).ToHashSet();

        if (selectedLaundromatIds.Any())
        {
            laundromatItems = laundromatItems.OrderByDescending(item => selectedLaundromatIds.Contains(item.Id)).ThenBy(item =>
            item.DisplayText).ToList();
            erpIdItems = erpIdItems.OrderByDescending(item => selectedLaundromatIds.Contains(item.Id)).ThenBy(item =>
            item.DisplayText).ToList();
            Console.WriteLine($"Manually selected {selectedLaundromats.Count} laundromats");
        }
        else
        {
            laundromatItems = laundromatItems.OrderBy(item => item.DisplayText).ToList();
            erpIdItems = erpIdItems.OrderBy(item => item.DisplayText).ToList();
            Console.WriteLine("No laundromats selected");
        }

        LaundryState.UpdateSelectedLaundromats(selectedLaundromats);
        LaundryState.UpdateLaundromatItems(laundromatItems);
        LaundryState.UpdateErpIdItems(erpIdItems);

        StateHasChanged();
    }
}