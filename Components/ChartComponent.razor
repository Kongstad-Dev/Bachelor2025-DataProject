@inject IJSRuntime JS

    <canvas id="@CanvasId" style="width: 100%;"></canvas>

@code {
    [Parameter] public string CanvasId { get; set; } = "chartCanvas";
    [Parameter] public string[] Labels { get; set; }
    [Parameter] public decimal[]? SingleValues { get; set; }
    [Parameter] public decimal[][]? MultiValues { get; set; }
    [Parameter] public string Title { get; set; } = "Chart";
    [Parameter] public string Type { get; set; } = "bar";
    [Parameter] public bool Stacked { get; set; } = false;
    [Parameter] public string[] BackgroundColors { get; set; } = Array.Empty<string>();
    [Parameter] public string[] DatasetLabels { get; set; } = Array.Empty<string>();

    private DotNetObjectReference<ChartComponent>? selfRef;

    // Hashes to track parameter changes
    private string? _prevLabelsHash;
    private string? _prevValuesHash;
    private string? _prevDatasetLabelsHash;
    private bool _hasRenderedOnce = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            selfRef = DotNetObjectReference.Create(this);
            StateHasChanged();
        }
    }

protected override void OnParametersSet()
{
    var labelsHash = Labels != null ? string.Join(",", Labels) : "";
    var valuesHash = SingleValues != null
        ? string.Join(",", SingleValues)
        : MultiValues != null
            ? string.Join("|", MultiValues.Select(row => string.Join(",", row)))
            : "";
    var datasetLabelsHash = DatasetLabels != null ? string.Join(",", DatasetLabels) : "";

    if (!_hasRenderedOnce || labelsHash != _prevLabelsHash || valuesHash != _prevValuesHash || datasetLabelsHash != _prevDatasetLabelsHash)
    {
        _ = InvokeAsync(async () =>
        {
            await Task.Yield(); // Let Blazor render loader
            await JS.InvokeVoidAsync("renderChart", new
            {
                canvasId = CanvasId,
                labels = Labels,
                values = NormalizeValues(),
                datasetLabels = DatasetLabels,
                title = Title,
                type = Type,
                stacked = Stacked,
                backgroundColors = BackgroundColors,
                dotNetRef = selfRef
            });
        });

        _prevLabelsHash = labelsHash;
        _prevValuesHash = valuesHash;
        _prevDatasetLabelsHash = datasetLabelsHash;
        _hasRenderedOnce = true;
    } 
}

    private decimal[][] NormalizeValues()
    {
        // If SingleValues is provided, wrap it into a 2D array
        if (SingleValues != null && SingleValues.Length > 0)
        {
            return new[] { SingleValues };
        }

        // If MultiValues is provided and not empty, return it
        if (MultiValues != null && MultiValues.Length > 0 && MultiValues[0] != null && MultiValues[0].Length > 0)
        {
            return MultiValues;
        }

        // Return a default empty structure that won't cause JS errors
        return new decimal[][] { new decimal[] { 0 } };
    }

    public void Dispose()
    {
        selfRef?.Dispose();
    }
}