@inject IJSRuntime JS

<canvas id="@CanvasId" style="width: 100%;"></canvas>

@code {
    [Parameter] public string CanvasId { get; set; } = "chartCanvas";
    [Parameter] public string[] Labels { get; set; }
    [Parameter] public decimal[]? SingleValues { get; set; } // For single dataset
    [Parameter] public decimal[][]? MultiValues { get; set; } // For multiple datasets
    [Parameter] public string Title { get; set; } = "Chart";
    [Parameter] public string Type { get; set; } = "bar"; // Default to bar chart
    [Parameter] public bool Stacked { get; set; } = false; // New parameter for stacked charts
    [Parameter] public string[] BackgroundColors { get; set; } = Array.Empty<string>(); // Optional colors
    [Parameter] public string[] DatasetLabels { get; set; } = Array.Empty<string>(); // Labels for datasets

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("renderChart", new
            {
                canvasId = CanvasId,
                labels = Labels,
                values = NormalizeValues(),
                datasetLabels = DatasetLabels,
                title = Title,
                type = Type,
                stacked = Stacked,
                backgroundColors = BackgroundColors
            });
        }
    }

    protected override void OnParametersSet()
    {
        JS.InvokeVoidAsync("renderChart", new
        {
            canvasId = CanvasId,
            labels = Labels,
            values = NormalizeValues(),
            datasetLabels = DatasetLabels,
            title = Title,
            type = Type,
            stacked = Stacked,
            backgroundColors = BackgroundColors
        });
    }

    private decimal[][] NormalizeValues()
    {
        // If SingleValues is provided, wrap it into a 2D array
        if (SingleValues != null && SingleValues.Length > 0)
        {
            return new[] { SingleValues };
        }

        // If MultiValues is provided and not empty, return it
        if (MultiValues != null && MultiValues.Length > 0 && MultiValues[0] != null && MultiValues[0].Length > 0)
        {
            return MultiValues;
        }

        // Return a default empty structure that won't cause JS errors
        return new decimal[][] { new decimal[] { 0 } };
    }
}