@using BlazorTest.Services
@using BlazorTest.Services.Analytics
@using BlazorTest.Services.Analytics.Util
@using BlazorTest.Database
@using Microsoft.JSInterop
@using Microsoft.EntityFrameworkCore
@inject IJSRuntime JSRuntime
@inject LaundryStateService LaundryState
@inject IDbContextFactory<YourDbContext> DbContextFactory
@inject DataAnalysisService AnalysisService

    <div class="csv-icon" @onclick="ExportDataToExcel"></div>

@code {
    [Parameter]
    public List<ChartDataPoint> Data { get; set; } = new();

    private async Task ExportDataToCsv()
    {
        if (Data == null || !Data.Any())
        {
            return;
        }

        // Get machine data using the service
        var laundromatIds = LaundryState.GetEffectiveSelectedLaundromatsIds();
        var startDate = LaundryState.GetStartDate();
        var endDate = LaundryState.GetEndDate();
        
        // Use "Revenue" as default metric key
        var machineData = await AnalysisService.GetMachineDetailsByLaundromat(
            laundromatIds, 
            startDate, 
            endDate, 
            "Revenue");

        // Export in the detailed machine format
        string csvContent = CsvExporter.ExportMachineDetailsPerLaundromatToCsv(machineData);

        var fileName = $"laundromat_machine_details_{DateTime.Now:yyyy-MM-dd}.csv";

        // Use the downloadCsvWithEncoding function instead
        await JSRuntime.InvokeVoidAsync("downloadCsvWithEncoding", fileName, csvContent);
    }

    private async Task ExportDataToExcel()
    {
        if (Data == null || !Data.Any())
        {
            return;
        }

        // Get machine data using the service
        var laundromatIds = LaundryState.GetEffectiveSelectedLaundromatsIds();
        var startDate = LaundryState.GetStartDate();
        var endDate = LaundryState.GetEndDate();
        
        // Use "Revenue" as default metric key  
        var machineData = await AnalysisService.GetMachineDetailsByLaundromat(
            laundromatIds, 
            startDate, 
            endDate, 
            "Revenue");
        
        // Generate Excel bytes
        byte[] excelBytes = ExcelExporter.ExportMachineDetailsToExcel(machineData);
        
        var fileName = $"laundromat_data_{DateTime.Now:yyyy-MM-dd}.xlsx";
        
        // Use JS interop to download the Excel file
        await JSRuntime.InvokeVoidAsync("downloadFileFromBytes", fileName, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", Convert.ToBase64String(excelBytes));
    }
}