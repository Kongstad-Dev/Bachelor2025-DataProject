@page "/Test"
@rendermode InteractiveServer
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<PageTitle>Test</PageTitle>


<h3>Bank Revenue Chart</h3>

<canvas id="bankRevenueChart"></canvas>

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <p><strong>Bank ID:</strong> @bankId</p>
    <p><strong>Total Revenue:</strong> @totalRevenue</p>
}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    window.drawChart = function (chartData) {
        console.log("JavaScript function drawChart called with data:", chartData);

        const defaultColors = [
            "#3366CC", "#DC3912", "#FF9900", "#109618", "#990099",
            "#3B3EAC", "#0099C6", "#DD4477", "#66AA00", "#B82E2E"
        ];

        function getRandomColor() {
            const letters = "0123456789ABCDEF";
            let color = "#";
            for (let i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }

        var ctx = document.getElementById("bankRevenueChart");
        if (!ctx) {
            console.error("Canvas element 'bankRevenueChart' not found!");
            return;
        }

        if (window.myChart instanceof Chart) {
            window.myChart.destroy();
        }

        // Assign unique colors
        const totalPoints = chartData.values.length;
        const colors = [];
        for (let i = 0; i < totalPoints; i++) {
            colors.push(i < defaultColors.length ? defaultColors[i] : getRandomColor());
        }

        // Creating multiple datasets, each with its own label
        const datasets = chartData.labels.map((label, index) => ({
            label: label, // This ensures unique labels in the legend
            data: [chartData.values[index]],
            backgroundColor: colors[index],
            borderColor: colors[index],
            borderWidth: 1
        }));

        window.myChart = new Chart(ctx.getContext("2d"), {
            type: "bar",
            data: {
                labels: ["Revenue"], // X-axis label
                datasets: datasets // Each dataset gets a separate legend entry
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: true,
                        position: "top"
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        console.log("Chart drawn successfully!");
    };

</script>


@code {
    private decimal totalRevenue;
    private int bankId = 1; // Change this to the correct bank ID
    private bool isLoading = true;
    private bool isRendered = false;

    protected override async Task OnInitializedAsync()
    {
        await FetchRevenueData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isRendered && totalRevenue != 0)
        {
            var chartPayload = new
            {
                labels = new[] { "Total RevenueA", "Total RevenueB", "Total RevenueC" },
                values = new[] { totalRevenue, 100000, 120000 },
                colors = new[] { "rgba(14, 28, 56, 1)", "rgba(54, 162, 235, 0.2)", "rgba(153, 102, 255, 0.2)" }
            };
            await JS.InvokeVoidAsync("drawChart", chartPayload);
        }
    }

    private async Task FetchRevenueData()
    {
        try
        {
            var apiUrl = $"http://localhost:5171/api/Transaction/bank/{bankId}/revenue";
            Console.WriteLine($"[Blazor] Fetching data from {apiUrl}");

            var response = await Http.GetFromJsonAsync<RevenueResponse>(apiUrl);

            if (response != null)
            {
                totalRevenue = response.Revenue;
                Console.WriteLine($"[Blazor] Bank {bankId} Revenue: {totalRevenue}");
                isRendered = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Blazor] API Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private class RevenueResponse
    {
        public int BankId { get; set; }
        public decimal Revenue { get; set; }
    }
}