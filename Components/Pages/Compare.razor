@page "/compare"
@using BlazorTest.Services
@using BlazorTest.Services.Analytics
@inject CompareAnalysisServices CompareService
@inject LaundryStateService LaundryState
@rendermode InteractiveServer

<PageTitle>Compare</PageTitle>

<div class="compare-container">
    <div class="compare-selected-laundromats">
        <SelectedLaudromats />
    </div>

    <div class="compare-content">
        @if (isLoading)
        {
            <div>Loading comparison charts...</div>
        }
        else if (chartLabelsCompareRev.Length > 0)
        {
            <div class="compare-graph">
                <ChartComponent CanvasId="compareTransactions"
                                Labels="@chartLabelsCompareTrans"
                                MultiValues="@chartValuesCompareTrans"
                                DatasetLabels="@chartDatasetLabelsCompareTrans"
                                Title="Transactions Over Time"
                                Type="line"
                                Stacked="false" />
            </div>
            <div class="compare-graph">
                <ChartComponent CanvasId="compareRevenue"
                                Labels="@chartLabelsCompareRev"
                                MultiValues="@chartValuesCompareRev"
                                DatasetLabels="@chartDatasetLabelsCompareRev"
                                Title="Revenue Over Time"
                                Type="line"
                                Stacked="false" />
            </div>
        }
        else
        {
            <div>No data available for selected laundromats or date range.</div>
            <div>Loaded laundromats: @chartDatasetLabelsCompareTrans.Length</div>
            <div>Labels: @string.Join(", ", chartLabelsCompareTrans)</div>
        }
    </div>
</div>

@code {
    private bool isLoading = true;
    private bool isDataLoading = false;
    private CancellationTokenSource cts = new();

    private string[] chartLabelsCompareTrans = Array.Empty<string>();
    private decimal[][] chartValuesCompareTrans = Array.Empty<decimal[]>();
    private string[] chartDatasetLabelsCompareTrans = Array.Empty<string>();

    private string[] chartLabelsCompareRev = Array.Empty<string>();
    private decimal[][] chartValuesCompareRev = Array.Empty<decimal[]>();
    private string[] chartDatasetLabelsCompareRev = Array.Empty<string>();

    private List<string> laundromatIds = new();
    private DateTime? startDate;
    private DateTime? endDate;

    protected override async Task OnInitializedAsync()
    {
        LaundryState.OnStateChanged += OnStateChanged;
        await LoadCompareData(cts.Token);
    }

    private void OnStateChanged()
    {
        InvokeAsync(HandleStateChanged);
    }

    private async Task HandleStateChanged()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            cts.Cancel();
            cts.Dispose();
            cts = new CancellationTokenSource();

            laundromatIds = LaundryState.GetEffectiveSelectedLaundromatsIds();
            startDate = LaundryState.GetStartDate();
            endDate = LaundryState.GetEndDate();

            await LoadCompareData(cts.Token);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling state change: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadCompareData(CancellationToken token)
    {
        if (isDataLoading) return;

        try
        {
            isDataLoading = true;

            laundromatIds = LaundryState.GetEffectiveSelectedLaundromatsIds();
            startDate = LaundryState.GetStartDate();
            endDate = LaundryState.GetEndDate();

            var safeStart = startDate ?? DateTime.Today.AddMonths(-6);
            var safeEnd = endDate ?? DateTime.Today;

            var compareTransTask = CompareService.CalcTransactionOverTimeCompare(laundromatIds, safeStart, safeEnd);
            var compareRevTask = CompareService.CalcRevenueOverTimeCompare(laundromatIds, safeStart, safeEnd);

            await Task.WhenAll(compareTransTask, compareRevTask);
            token.ThrowIfCancellationRequested();

            // Process transactions
            var transRaw = await compareTransTask;
            chartLabelsCompareTrans = transRaw.Values.SelectMany(dict => dict.Keys).Distinct().OrderBy(label => label).ToArray();
            chartDatasetLabelsCompareTrans = transRaw.Keys.ToArray();
            chartValuesCompareTrans = transRaw.Select(kvp =>
                chartLabelsCompareTrans.Select(label => kvp.Value.TryGetValue(label, out var v) ? v : 0m).ToArray()
            ).ToArray();

            // Process revenue
            var revRaw = await compareRevTask;
            chartLabelsCompareRev = revRaw.Values.SelectMany(dict => dict.Keys).Distinct().OrderBy(label => label).ToArray();
            chartDatasetLabelsCompareRev = revRaw.Keys.ToArray();
            chartValuesCompareRev = revRaw.Select(kvp =>
                chartLabelsCompareRev.Select(label => kvp.Value.TryGetValue(label, out var v) ? v : 0m).ToArray()
            ).ToArray();
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("Compare data load canceled.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ComparePage error: {ex.Message}");
        }
        finally
        {
            isDataLoading = false;
            isLoading = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        LaundryState.OnStateChanged -= OnStateChanged;
        cts.Cancel();
        cts.Dispose();
    }
}
