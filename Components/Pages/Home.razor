@page "/"
@using Microsoft.EntityFrameworkCore
@using BlazorTest.Services
@using BlazorTest.Components
@using BlazorTest.Database
@inject DataAnalysisService AnalysisService
@inject LaundryStateService LaundryState
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="main-container">
    <div class="main-content">
        <div class="main-content-tabels">
            <SelectedLaudromats />
            @if (isLoading)
            {
                <div>Loading data...</div>
            }
            else
            {
                <KeyValuesTable Title="Key Values" Values="@keyValuePairs" />
            }
        </div>

        <div class="main-content-graphs">
            @if (!isLoading && chartLabelsSum.Length > 0)
            {
                <div class="main-graph-container">
                    <ChartComponent CanvasId="revenueByLaundromat" Labels="@chartLabelsSum" Values="@chartValuesSum"
                        Title="Revenue by Laundromat" Type="bar" />
                </div>
                <div class="main-graph-container">
                    <ChartComponent CanvasId="revenueOverTime" Labels="@chartLabelsTime" Values="@chartValuesTime"
                        Title="Revenue Over Time" Type="line" />
                </div>
                <div class="main-graph-container">
                    <ChartComponent CanvasId="revenueDistribution" Labels="@chartLabelsSum" Values="@chartValuesSum"
                        Title="Revenue Distribution" Type="pie" />
                </div>
                <div class="main-graph-container">
                    <ChartComponent CanvasId="revenueComparison" Labels="@chartLabelsSum" Values="@chartValuesSum"
                        Title="Revenue Comparison" Type="bar" />
                </div>
            }
            else if (isLoading)
            {
                <div>Loading charts...</div>
            }
        </div>
    </div>
</div>

<div class="main-special-container">
    @foreach (var option in specialOptions)
    {
        <button class="@(selectedSpecialContent == option ? "active" : "")" @onclick='() => ChangeSelectedContent(option)'>
            @option
        </button>
    }

    <div class="main-special-content">
        @if (!string.IsNullOrEmpty(selectedSpecialContent))
        {

            <h2>@selectedSpecialContent</h2>
            <div class="main-special-content-graphs">
                @if (selectedSpecialContent == "Soap Statistics")
                {
                    <div class="main-graph-container small">
                        <ChartComponent CanvasId="soapUsage" Labels="@chartLabelsSumSoap" Values="@chartValuesSumSoap"
                            Title="Soap Usage" Type="bar" />
                    </div>
                    <div class="main-graph-container small">
                        <ChartComponent CanvasId="soapDataProcentage" Labels="@chartLabelsProcentageSoap"
                            Values="@chartValuesProcentageSoap" Title="Soap Usage Procent" Type="pie" />
                    </div>



                }
                else if (selectedSpecialContent == "Temperature Statistics")
                {
                    <p>Temperature data would appear here.</p>
                }
                else if (selectedSpecialContent == "Program Type Statistics")
                {
                    <p>Program type distribution would appear here.</p>
                }
                else if (selectedSpecialContent == "Rinse Statistics")
                {
                    <p>Rinse cycle data would appear here.</p>
                }
            </div>
        }
    </div>
</div>

@code {
    private string selectedSpecialContent = "";
    private readonly string[] specialOptions = {
"Soap Statistics",
"Temperature Statistics",
"Program Type Statistics",
"Rinse Statistics"
};

    private string[] chartLabelsSum = Array.Empty<string>();
    private decimal[] chartValuesSum = Array.Empty<decimal>();
    private string[] chartLabelsTime = Array.Empty<string>();
    private decimal[] chartValuesTime = Array.Empty<decimal>();
    private string[] chartLabelsSumSoap = Array.Empty<string>();
    private decimal[] chartValuesSumSoap = Array.Empty<decimal>();
    private string[] chartLabelsProcentageSoap = Array.Empty<string>();
    private decimal[] chartValuesProcentageSoap = Array.Empty<decimal>();
    private string[] chartLabelsTimeTrans = Array.Empty<string>();
    private decimal[] chartValuesTimeTrans = Array.Empty<decimal>();
    private bool isLoading = true;

    private List<string> effectiveLaundromats = new();
    private List<KeyValuePair<string, decimal>> keyValuePairs = new();
    private DateTime? startDate;
    private DateTime? endDate;

    // Track if data is already loading
    private bool isDataLoading = false;
    
    // Cancel data loading operations if component is disposed
    private CancellationTokenSource cts = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Set up state changed handler
            LaundryState.OnStateChanged += StateChangedHandler;

            // Get initial filter values
            effectiveLaundromats = LaundryState.GetEffectiveSelectedLaundromatsIds();
            startDate = LaundryState.GetStartDate();
            endDate = LaundryState.GetEndDate();

            // Load data
            await LoadDashboardData(cts.Token);
        }
        catch (OperationCanceledException)
        {
            // Operation was canceled, do nothing
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void StateChangedHandler()
    {
        // Use InvokeAsync to safely handle the event
        InvokeAsync(async () =>
        {
            try
            {
                // Prevent multiple simultaneous data refreshes
                if (!isDataLoading)
                {
                    await HandleStateChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error handling state change: {ex.Message}");
            }
        });
    }
    

    private async Task LoadDashboardData(CancellationToken token)
    {
        if (isDataLoading) return;
        
        try
        {
            isDataLoading = true;
            
            // Create tasks for parallel execution
            var keyValuesTask = AnalysisService.GetKeyValuesFromStats(
                effectiveLaundromats,
                startDate,
                endDate);

            var revenueSumTask = AnalysisService.GetRevenueForLaundromatsFromStats(
                effectiveLaundromats,
                startDate ?? DateTime.MinValue,
                endDate ?? DateTime.MaxValue);

            var revenueTimeTask = AnalysisService.GetRevenueForLaundromatsOverTime(
                effectiveLaundromats,
                startDate ?? DateTime.MinValue,
                endDate ?? DateTime.MaxValue);
                
            var transactionTimeTask = AnalysisService.CalculateTransactionOverTime(
                effectiveLaundromats,
                startDate ?? DateTime.MinValue,
                endDate ?? DateTime.MaxValue);


            // Wait for all tasks to complete
            await Task.WhenAll(keyValuesTask, revenueSumTask, revenueTimeTask);

            // Process results (only if not canceled)
            token.ThrowIfCancellationRequested();

            keyValuePairs = await keyValuesTask;
            Console.WriteLine($"Loaded key values: {keyValuePairs.Count}");

            var resultSum = await revenueSumTask;
            chartLabelsSum = resultSum.Select(r => r.Label).ToArray();
            chartValuesSum = resultSum.Select(r => r.Value).ToArray();
            Console.WriteLine($"Loaded sum chart data: {chartLabelsSum.Length} items");

            var resultTime = await revenueTimeTask;
            chartLabelsTime = resultTime.Select(r => r.Label).ToArray();
            chartValuesTime = resultTime.Select(r => r.Value).ToArray();
            Console.WriteLine($"Loaded time chart data: {chartLabelsTime.Length} items");
            
            var resultTimeTrans = await transactionTimeTask;
            chartLabelsTimeTrans = resultTimeTrans.Select(r => r.Label).ToArray();
            chartValuesTimeTrans = resultTimeTrans.Select(r => r.Value).ToArray();
            Console.WriteLine($"Loaded time chart data: {chartLabelsTime.Length} items");
            
            await UpdateChartData(selectedSpecialContent);
        }
        finally
        {
            isDataLoading = false;
        }
    }

    private async Task HandleStateChanged()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Cancel any previous operations
            cts.Cancel();
            cts.Dispose();
            cts = new CancellationTokenSource();

            // Get updated filter values
            var newLaundromats = LaundryState.GetEffectiveSelectedLaundromatsIds();
            var newStartDate = LaundryState.GetStartDate();
            var newEndDate = LaundryState.GetEndDate();
            
            // Check if anything actually changed to avoid unnecessary reloads
            if (!HasSelectionChanged(newLaundromats, newStartDate, newEndDate))
            {
                isLoading = false;
                StateHasChanged();
                return;
            }
            
            // Update field values
            effectiveLaundromats = newLaundromats;
            startDate = newStartDate;
            endDate = newEndDate;

            // Reload all data
            await LoadDashboardData(cts.Token);
        }
        catch (OperationCanceledException)
        {
            // Operation was canceled, do nothing
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing dashboard: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    // Helper to determine if selection actually changed
    private bool HasSelectionChanged(List<string> newLaundromats, DateTime? newStartDate, DateTime? newEndDate)
    {
        if (newLaundromats.Count != effectiveLaundromats.Count) return true;
        if (newStartDate != startDate || newEndDate != endDate) return true;
        
        // Check if any laundromat IDs changed
        for (int i = 0; i < newLaundromats.Count; i++)
        {
            if (!effectiveLaundromats.Contains(newLaundromats[i])) return true;
        }
        
        return false;
    }
    


    private async void ChangeSelectedContent(string content)
    {
        selectedSpecialContent = content;
        await UpdateChartData(content);
    }
    
    private async Task UpdateChartData(string content)
    {
        switch (content)
        {
            case "Soap Statistics":
                var soapData = await AnalysisService.CalculateTotalSoapProgramFromTransactions( effectiveLaundromats,
                    startDate ?? DateTime.MinValue,
                    endDate ?? DateTime.MaxValue);
                chartLabelsSumSoap = soapData.Select(d => d.Label).ToArray();
                chartValuesSumSoap = soapData.Select(d => d.Value).ToArray();
                var soapDataProcentage = await AnalysisService.CalculateTotalSoapProgramProcentageFromTransactions( effectiveLaundromats,
                    startDate ?? DateTime.MinValue,
                    endDate ?? DateTime.MaxValue);
                chartLabelsProcentageSoap = soapDataProcentage.Select(d => d.Label).ToArray();
                chartValuesProcentageSoap = soapDataProcentage.Select(d => d.Value).ToArray();
                
                break;
            case "Temperature Statistics":
                // Call the appropriate method from AnalysisService and update chart data
                break;
            case "Program Type Statistics":
                // Call the appropriate method from AnalysisService and update chart data
                break;
            case "Rinse Statistics":
                // Call the appropriate method from AnalysisService and update chart data
                break;
        }
        StateHasChanged();
    }

    public void Dispose()
    {
        // Clean up event handlers and cancel any pending operations
        LaundryState.OnStateChanged -= StateChangedHandler;
        cts.Cancel();
        cts.Dispose();
    }
}