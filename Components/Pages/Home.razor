@page "/"
@using Microsoft.EntityFrameworkCore
@using BlazorTest.Services
@using BlazorTest.Components
@using BlazorTest.Database
@inject DataAnalysisService AnalysisService
@inject LaundryStateService LaundryState
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="main-container">
    <div class="main-content">
        <div class="main-content-tabels">
            <SelectedLaudromats />
            @if (isLoading)
            {
                <div>Loading data...</div>
            }
            else
            {
                <KeyValuesTable Title="Key Values" Values="@keyValuePairs" />
            }
        </div>

        <div class="main-content-graphs">
            @if (!isLoading && chartLabelsSum.Length > 0)
            {
                <div class="main-graph-container">
                    <ChartComponent CanvasId="revenueOverTime" Labels="@chartLabelsTime" SingleValues="@chartValuesTime"
                        Title="Revenue Over Time" Type="line" Stacked=false />
                </div>
                <div class="main-graph-container">
                    <ChartComponent CanvasId="TransactionsOverTime" Labels="@chartLabelsTimeTrans"
                        SingleValues="@chartValuesTimeTrans" Title="Transactions Over Time" Type="line" />
                </div>
                /*
                <div class="main-graph-container">
                <ChartComponent CanvasId="revenueDistribution" Labels="@chartLabelsSum" SingleValues="@chartValuesSum"
                Title="Revenue Distribution" Type="pie" />
                </div>
                */
                <div class="main-graph-container">
                    <ChartComponent CanvasId="stackedBarChart" Labels='@chartLabelsSumMachine'
                        MultiValues="@chartValuesSumMachine" Title='Stacked Bar Chart' Type="bar" Stacked="true"
                        BackgroundColors='new[] { "rgba(255, 99, 132, 0.7)", "rgba(54, 162, 235, 0.7)", "rgba(75, 192, 192, 0.7)" }'
                        DatasetLabels="@chartLabelsMachine" />
                </div>
            }
            else if (isLoading)
            {
                <div>Loading charts...</div>
            }
        </div>
    </div>
</div>

<div class="main-special-container">
    @foreach (var option in specialOptions)
    {
        <button class="@(selectedSpecialContent == option ? "active" : "")" @onclick='() => ChangeSelectedContent(option)'>
            @option
        </button>
    }

    <div class="main-special-content">
        @if (!string.IsNullOrEmpty(selectedSpecialContent))
        {

            <h2>@selectedSpecialContent</h2>
            <div class="main-special-content-graphs">
                @if (selectedSpecialContent == "Soap Statistics")
                {
                    <div class="main-graph-container small">
                        <ChartComponent CanvasId="soapUsage" Labels="@chartLabelsSumSoap" SingleValues="@chartValuesSumSoap"
                            Title="Soap Usage" Type="bar" />
                    </div>
                    <div class="main-graph-container small">
                        <ChartComponent CanvasId="soapDataProcentage" Labels="@chartLabelsProcentageSoap"
                            SingleValues="@chartValuesProcentageSoap" Title="Soap Usage Procent" Type="pie" />
                    </div>
                }
                else if (selectedSpecialContent == "Temperature Statistics")
                {
                    <div class="main-graph-container small">
                        <ChartComponent CanvasId="TempUsage" Labels="@chartLabelsTemp" SingleValues="@chartValuesTemp"
                                        Title="Temperature Usage" Type="bar" />
                    </div>
                    <div class="main-graph-container small">
                        <ChartComponent CanvasId="TempUsageProcentage" Labels="@chartLabelsTempProcentage" SingleValues="@chartValuesTempProcentage"
                                        Title="Temperature Usage %" Type="pie" />
                    </div>
                }
                else if (selectedSpecialContent == "Program Type Statistics")
                {
                    <div class="main-graph-container small">
                        <ChartComponent CanvasId="PTUsage" Labels="@chartLabelsPT" SingleValues="@chartValuesPT"
                                        Title="Program Type Usage" Type="bar" />
                    </div>
                    <div class="main-graph-container small">
                        <ChartComponent CanvasId="PTDataProcentage" Labels="@chartLabelsPTProcentage"
                                        SingleValues="@chartValuesPTProcentage" Title="Program Type Usage Procent" Type="pie" />
                    </div>
                }
                else if (selectedSpecialContent == "Rinse Statistics")
                {
                    <div class="main-graph-container small">
                        <ChartComponent CanvasId="RinseUsage" Labels="@chartLabelsRinse" SingleValues="@chartValuesRinse"
                                        Title="Rinse Usage" Type="bar" />
                    </div>
                    <div class="main-graph-container small">
                        <ChartComponent CanvasId="RinseDataProcentage" Labels="@chartLabelsRinseProcentage"
                                        SingleValues="@chartValuesRinseProcentage" Title="Rinse Usage Procent" Type="pie" />
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private string selectedSpecialContent = "";
    private readonly string[] specialOptions = {
"Soap Statistics",
"Temperature Statistics",
"Program Type Statistics",
"Rinse Statistics"
};

    private string[] chartLabelsSum = Array.Empty<string>();
    private decimal[] chartValuesSum = Array.Empty<decimal>();
    private string[] chartLabelsTime = Array.Empty<string>();
    private decimal[] chartValuesTime = Array.Empty<decimal>();
    private string[] chartLabelsSumSoap = Array.Empty<string>();
    private decimal[] chartValuesSumSoap = Array.Empty<decimal>();
    private string[] chartLabelsProcentageSoap = Array.Empty<string>();
    private decimal[] chartValuesProcentageSoap = Array.Empty<decimal>();
    private string[] chartLabelsTimeTrans = Array.Empty<string>();
    private decimal[] chartValuesTimeTrans = Array.Empty<decimal>();
    private string[] chartLabelsSumMachine = Array.Empty<string>();
    private decimal[][] chartValuesSumMachine = Array.Empty<decimal[]>();
    private string[] chartLabelsMachine = Array.Empty<string>();
    private decimal[] chartValuesTemp = Array.Empty<decimal>();
    private string[] chartLabelsTemp= Array.Empty<string>();
    private string[] chartLabelsTempProcentage = Array.Empty<string>();
    private decimal[] chartValuesTempProcentage= Array.Empty<decimal>();
    private string[] chartLabelsPT = Array.Empty<string>();
    private decimal[] chartValuesPT= Array.Empty<decimal>();
    private string[] chartLabelsPTProcentage = Array.Empty<string>();
    private decimal[] chartValuesPTProcentage= Array.Empty<decimal>();
    
    
    private string[] chartLabelsRinse = Array.Empty<string>();
    private decimal[] chartValuesRinse= Array.Empty<decimal>();
    private string[] chartLabelsRinseProcentage = Array.Empty<string>();
    private decimal[] chartValuesRinseProcentage= Array.Empty<decimal>();

    
    
    private bool isLoading = true;

    private string _lastSoapDataParams = string.Empty;
    private string _lastTemperatureDataParams = string.Empty;
    private string _lastProgramTypeDataParams = string.Empty;
    private string _lastRinseDataParams = string.Empty;

    private List<string> effectiveLaundromats = new();
    private List<KeyValuePair<string, decimal>> keyValuePairs = new();
    private DateTime? startDate;
    private DateTime? endDate;

    // Track if data is already loading
    private bool isDataLoading = false;

    // Cancel data loading operations if component is disposed
    private CancellationTokenSource cts = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Set up state changed handler
            LaundryState.OnStateChanged += StateChangedHandler;

            // Get initial filter values
            effectiveLaundromats = LaundryState.GetEffectiveSelectedLaundromatsIds();
            startDate = LaundryState.GetStartDate();
            endDate = LaundryState.GetEndDate();

            // Load data
            await LoadDashboardData(cts.Token);
        }
        catch (OperationCanceledException)
        {
            // Operation was canceled, do nothing
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void StateChangedHandler()
    {
        // Use InvokeAsync to safely handle the event
        InvokeAsync(async () =>
        {
            try
            {
                // Prevent multiple simultaneous data refreshes
                if (!isDataLoading)
                {
                    await HandleStateChanged();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error handling state change: {ex.Message}");
            }
        });
    }

    private string GetCurrentParams()
    {
        return string.Join(",", effectiveLaundromats) +
        (startDate?.Ticks.ToString() ?? "0") +
        (endDate?.Ticks.ToString() ?? "0");
    }


    private async Task LoadDashboardData(CancellationToken token)
    {
        if (isDataLoading) return;

        try
        {
            isDataLoading = true;

            // Create tasks for parallel execution
            var keyValuesTask = AnalysisService.GetKeyValuesFromStats(
            effectiveLaundromats,
            startDate,
            endDate);

            var revenueSumTask = AnalysisService.GetRevenueForLaundromatsFromStats(
            effectiveLaundromats,
            startDate ?? DateTime.MinValue,
            endDate ?? DateTime.MaxValue);

            var revenueTimeTask = AnalysisService.GetRevenueForLaundromatsOverTime(
            effectiveLaundromats,
            startDate ?? DateTime.MinValue,
            endDate ?? DateTime.MaxValue);

            var transactionTimeTask = AnalysisService.CalculateTransactionOverTime(
            effectiveLaundromats,
            startDate ?? DateTime.MinValue,
            endDate ?? DateTime.MaxValue);

            var stackedMachineTask = AnalysisService.getStackedMachineStarts(
            effectiveLaundromats,
            startDate ?? DateTime.MinValue,
            endDate ?? DateTime.MaxValue);
            
           


            // Wait for all tasks to complete
            await Task.WhenAll(keyValuesTask, revenueSumTask, revenueTimeTask);

            // Process results (only if not canceled)
            token.ThrowIfCancellationRequested();

            keyValuePairs = await keyValuesTask;
           // Console.WriteLine($"Loaded key values: {keyValuePairs.Count}");

            var resultSum = await revenueSumTask;
            chartLabelsSum = resultSum.Select(r => r.Label).ToArray();
            chartValuesSum = resultSum.Select(r => r.Value).ToArray();
           // Console.WriteLine($"Loaded sum chart data: {chartLabelsSum.Length} items");

            var resultTime = await revenueTimeTask;
            chartLabelsTime = resultTime.Select(r => r.Label).ToArray();
            chartValuesTime = resultTime.Select(r => r.Value).ToArray();
           // Console.WriteLine($"Loaded time chart data: {chartLabelsTime.Length} items");

            var resultTimeTrans = await transactionTimeTask;
            chartLabelsTimeTrans = resultTimeTrans.Select(r => r.Label).ToArray();
            chartValuesTimeTrans = resultTimeTrans.Select(r => r.Value).ToArray();
            //Console.WriteLine($"Loaded time chart data: {chartLabelsTime.Length} items");

            var resultStackedMachine = await stackedMachineTask;
            chartLabelsSumMachine = resultStackedMachine.Labels.ToArray();
            chartValuesSumMachine = resultStackedMachine.Values.Select(r => r).ToArray();
            chartLabelsMachine = resultStackedMachine.unitNames.ToArray();
           // Console.WriteLine($"Loaded stacked machine chart data: {chartLabelsSumMachine.Length} items");

            await UpdateChartData(selectedSpecialContent);
        }
        finally
        {
            isDataLoading = false;
        }
    }

    private async Task HandleStateChanged()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Cancel any previous operations
            cts.Cancel();
            cts.Dispose();
            cts = new CancellationTokenSource();

            await Task.Delay(100); // Wait for 100ms to allow state to update
                                   // Get updated filter values
            var newLaundromats = LaundryState.GetEffectiveSelectedLaundromatsIds();
            var newStartDate = LaundryState.GetStartDate();
            var newEndDate = LaundryState.GetEndDate();

            // Check if anything actually changed to avoid unnecessary reloads
            if (!HasSelectionChanged(newLaundromats, newStartDate, newEndDate))
            {
                isLoading = false;
                StateHasChanged();
                return;
            }

            // Update field values
            effectiveLaundromats = newLaundromats;
            startDate = newStartDate;
            endDate = newEndDate;

            // Reload all data
            await LoadDashboardData(cts.Token);
        }
        catch (OperationCanceledException)
        {
            // Operation was canceled, do nothing
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing dashboard: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // Helper to determine if selection actually changed
    private bool HasSelectionChanged(List<string> newLaundromats, DateTime? newStartDate, DateTime? newEndDate)
    {
        if (newLaundromats.Count != effectiveLaundromats.Count) return true;
        if (newStartDate != startDate || newEndDate != endDate) return true;

        // Check if any laundromat IDs changed
        for (int i = 0; i < newLaundromats.Count; i++)
        {
            if (!effectiveLaundromats.Contains(newLaundromats[i])) return true;
        }

        return false;
    }



    private async void ChangeSelectedContent(string content)
    {
        selectedSpecialContent = content;
        await UpdateChartData(content);
    }

    private async Task UpdateChartData(string content)
    {
        try
        {if (content == "Soap Statistics" &&
(chartLabelsSumSoap.Length == 0 || _lastSoapDataParams != GetCurrentParams()))
{
    // Show loading indicator for this section only
    isLoading = true;
    StateHasChanged();

    // Load both soap datasets in parallel
    var soapDataTask = AnalysisService.CalculateTotalSoapProgramFromTransactions(
        effectiveLaundromats,
        startDate ?? DateTime.MinValue,
        endDate ?? DateTime.MaxValue);

    var soapPercentageDataTask = AnalysisService.CalculateTotalSoapProgramProcentageFromTransactions(
        effectiveLaundromats,
        startDate ?? DateTime.MinValue,
        endDate ?? DateTime.MaxValue);

    await Task.WhenAll(soapDataTask, soapPercentageDataTask);

    // Process regular soap data
    var soapData = await soapDataTask;
    chartLabelsSumSoap = soapData.Select(d => d.Label).ToArray();
    chartValuesSumSoap = soapData.Select(d => d.Value).ToArray();

    // Process percentage soap data
    var soapPercentageData = await soapPercentageDataTask;
    chartLabelsProcentageSoap = soapPercentageData.Select(d => d.Label).ToArray();
    chartValuesProcentageSoap = soapPercentageData.Select(d => d.Value).ToArray();

    // Save current parameters to avoid reloading unnecessarily
    _lastSoapDataParams = GetCurrentParams();

    // Remove loading indicator
    isLoading = false;
}
else if (content == "Temperature Statistics" &&
(chartLabelsTemp.Length == 0 || _lastTemperatureDataParams != GetCurrentParams()))
{
    isLoading = true;
    StateHasChanged();

    var TempTask = AnalysisService.TempProgramFromTransactions(
        effectiveLaundromats,
        startDate ?? DateTime.MinValue,
        endDate ?? DateTime.MaxValue);
    
    var TempTaskProcentage = AnalysisService.TempProgramProcentageFromTransactions(
        effectiveLaundromats,
        startDate ?? DateTime.MinValue,
        endDate ?? DateTime.MaxValue);

    await Task.WhenAll(TempTask, TempTaskProcentage);
    // Process temperature data
    var tempData = await TempTask;
    chartLabelsTemp = tempData.Select(d => d.Label).ToArray();
    chartValuesTemp = tempData.Select(d => d.Value).ToArray();
    
    var tempDataProcentage = await TempTaskProcentage;
    chartLabelsTempProcentage = tempDataProcentage.Select(d => d.Label).ToArray();
    chartValuesTempProcentage = tempDataProcentage.Select(d => d.Value).ToArray();
        
    // Save current parameters to avoid reloading unnecessarily
    _lastTemperatureDataParams = GetCurrentParams();

    // Remove loading indicator
    isLoading = false;
}
            else if (content == "Program Type Statistics" &&
            (chartLabelsProcentageSoap.Length == 0 || _lastProgramTypeDataParams != GetCurrentParams()))
            {
                isLoading = true;
                StateHasChanged();

                var PTTask = AnalysisService.ProgramTypeProgramFromTransactions(
                    effectiveLaundromats,
                    startDate ?? DateTime.MinValue,
                    endDate ?? DateTime.MaxValue);
    
                var PTTaskProcentage = AnalysisService.ProgramTypeProcentageFromTransactions(
                    effectiveLaundromats,
                    startDate ?? DateTime.MinValue,
                    endDate ?? DateTime.MaxValue);

                await Task.WhenAll(PTTask, PTTaskProcentage);
                // Process temperature data
                var PTData = await PTTask;
                chartLabelsPT = PTData.Select(d => d.Label).ToArray();
                chartValuesPT = PTData.Select(d => d.Value).ToArray();
    
                var PTDataProcentage = await PTTaskProcentage;
                chartLabelsPTProcentage = PTDataProcentage.Select(d => d.Label).ToArray();
                chartValuesPTProcentage = PTDataProcentage.Select(d => d.Value).ToArray();

                // Program type data loading would go here
                _lastProgramTypeDataParams = GetCurrentParams();
                
                // Remove loading indicator
                isLoading = false;
               
            }
            else if (content == "Rinse Statistics" &&
            (chartLabelsProcentageSoap.Length == 0 || _lastRinseDataParams != GetCurrentParams()))
            {
                isLoading = true;
                StateHasChanged();

                var RinseTask = AnalysisService.RinseFromTransactions(
                    effectiveLaundromats,
                    startDate ?? DateTime.MinValue,
                    endDate ?? DateTime.MaxValue);
    
                var RinseTaskProcentage = AnalysisService.RinseProcentageFromTransactions(
                    effectiveLaundromats,
                    startDate ?? DateTime.MinValue,
                    endDate ?? DateTime.MaxValue);

                await Task.WhenAll(RinseTask, RinseTaskProcentage);
                // Process temperature data
                var RinseData = await RinseTask;
                chartLabelsRinse = RinseData.Select(d => d.Label).ToArray();
                chartValuesRinse = RinseData.Select(d => d.Value).ToArray();
    
                var RinseDataProcentage = await RinseTaskProcentage;
                chartLabelsRinseProcentage = RinseDataProcentage.Select(d => d.Label).ToArray();
                chartValuesRinseProcentage = RinseDataProcentage.Select(d => d.Value).ToArray();
                // Rinse data loading would go here
                _lastRinseDataParams = GetCurrentParams();
                // Remove loading indicator
                isLoading = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading special content data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        // Clean up event handlers and cancel any pending operations
        LaundryState.OnStateChanged -= StateChangedHandler;
        cts.Cancel();
        cts.Dispose();
    }
}