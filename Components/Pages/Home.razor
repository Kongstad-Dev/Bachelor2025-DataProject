@page "/"
@using Microsoft.EntityFrameworkCore
@using BlazorTest.Services
@using BlazorTest.Components
@using BlazorTest.Database
@inject DataAnalysisService AnalysisService
@inject LaundryStateService LaundryState
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="main-container">
    <div class="main-content">
        <div class="main-content-tabels">
            <SelectedLaudromats />
            <KeyValuesTable Title="Bank Revenue" Values="@keyValuePairs" />
        </div>

        <div class="main-content-graphs">
            <div class="main-graph-container" <ChartComponent CanvasId="bankRevenueChartBar" Labels="@chartLabels"
                                                              Values="@chartValues" Title="Revenue per Laundromat" Type="bar" />
        </div>
        <div class="main-graph-container" <ChartComponent CanvasId="bankRevenueChartLine" Labels="@chartLabels"
                                                          Values="@chartValues" Title="Revenue per Laundromat" Type="line" />
    </div>
    <div class="main-graph-container" <ChartComponent CanvasId="bankRevenueChartPie" Labels="@chartLabels"
                                                      Values="@chartValues" Title="Revenue per Laundromat" Type="pie" />
</div>
<div class="main-graph-container" <ChartComponent CanvasId="bankRevenueChartDoughnut" Labels="@chartLabels"
                                                  Values="@chartValues" Title="Revenue per Laundromat" Type="doughnut" />
</div>
</div>
</div>
</div>


<div class="main-special-container">
    <button @onclick='() => ChangeSelectedContent("Soap Statistics")'>Soap Statistics</button>
    <button @onclick='() => ChangeSelectedContent("Temperature Statistics")'>Temperature Statistics</button>
    <button @onclick='() => ChangeSelectedContent("Program Type Statistics")'>Program Type Statistics</button>
    <button @onclick='() => ChangeSelectedContent("Rinse Statistics")'>Rinse Statistics</button>


    <div class="main-special-content">
        @if (!string.IsNullOrEmpty(selectedSpecialContent))
        {
            <div class="main-special-content-header">
                <h2>@selectedSpecialContent</h2>
            </div>
        }
    </div>
</div>

@code {
    private string selectedSpecialContent = "";

    private void ChangeSelectedContent(string content)
    {
        selectedSpecialContent = content;
    }
    private string[] chartLabels = [];
    private decimal[] chartValues = [];

    protected override async Task OnInitializedAsync()
    {
        LaundryState.OnStateChanged += async () => await HandleStateChanged();

        effectiveLaundromats = LaundryState.GetEffectiveSelectedLaundromatsIds();
        startDate = LaundryState.GetStartDate();
        endDate = LaundryState.GetEndDate();
        var result = await AnalysisService.GetRevenueForLaundromats(effectiveLaundromats, startDate ?? DateTime.MinValue,
        endDate ?? DateTime.MaxValue);
        chartLabels = result.Select(r => r.Label).ToArray();
        chartValues = result.Select(r => r.Value).ToArray();
        StateHasChanged();
    }

    private List<string> effectiveLaundromats = new List<string>();
    private List<KeyValuePair<string, decimal>> keyValuePairs = new List<KeyValuePair<string, decimal>>();

    private DateTime? startDate;
    private DateTime? endDate;

    private async Task HandleStateChanged()
    {
        effectiveLaundromats = LaundryState.GetEffectiveSelectedLaundromatsIds();
        startDate = LaundryState.GetStartDate();
        endDate = LaundryState.GetEndDate();
        var result = await AnalysisService.GetRevenueForLaundromatsOverTime(LaundryState.GetEffectiveSelectedLaundromatsIds(), startDate ?? DateTime.MinValue,
        endDate ?? DateTime.MaxValue);
        chartLabels = result.Select(r => r.Label).ToArray();
        chartValues = result.Select(r => r.Value).ToArray();

        keyValuePairs = await AnalysisService.GetKeyValues(effectiveLaundromats, startDate ?? DateTime.MinValue, endDate ??
        DateTime.MaxValue);
        Console.WriteLine("Key Values: " + string.Join(", ", keyValuePairs));

        StateHasChanged();
    }

}
